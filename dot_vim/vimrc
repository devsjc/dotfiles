vim9script
#=== VIM SETTINGS =====================================================================

unlet! g:skip_defaults_vim
source $VIMRUNTIME/defaults.vim

g:mapleader = ' '      # Set the leader key to space

nnoremap <leader>1 :Lexplore %:p:h<CR>
syntax enable
filetype plugin indent on
set tabstop=4 shiftwidth=4 softtabstop=-1 expandtab
set hlsearch incsearch ignorecase
set number relativenumber 
set breakindent smartindent wrap linebreak
set encoding=UTF-8
set updatetime=100
set splitbelow splitright
set undofile undodir=~/.local/state/vim/undo
set path+=** wildmenu wildignore+=*/node_modules/*,*/.git/*,*/.DS_Store

autocmd FileType markdown setlocal spell spelllang=en_gb
for ft in ['html', 'vim', 'terraform', 'css']
  execute 'autocmd FileType ' .. ft .. ' setlocal tabstop=2 shiftwidth=2'
endfor

if $COLORTERM == 'truecolor'
  set termguicolors
endif

def g:SynGroup()
  var l = synID(line('.'), col('.'), 1)
  echo synIDattr(l, 'name') .. ' -> ' .. synIDattr(synIDtrans(l), 'name')
enddef

# --- Netrw settings-----------------------------------------------------------------
g:netrw_liststyle = 3
g:netrw_fastbrowse = 0
g:netrw_localcopydircmd = 'cp -r'
g:netrw_winsize = 30
g:netrw_list_hide = '^\.,\~,*\.pyc,*\.egg*$,*/_trial_temp*"'

augroup netrw
  autocmd!
  autocmd FileType netrw setlocal bufhidden=wipe
augroup end


#=== PLUGINS ==========================================================================

if empty(glob('~/.vim/autoload/plug.vim'))
  execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

plug#begin('~/.vim/pack/packager/start')
# Navigation, search, language features
Plug 'girishji/scope.vim'
Plug 'yegappan/lsp', { 'dir': '~/.vim/pack/packager/opt/lsp' }
Plug 'github/copilot.vim'
# Version control
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
# UI modifications
Plug 'bluz71/vim-mistfly-statusline'
Plug 'ap/vim-css-color'
Plug 'devsjc/vim-jb'
# Helpers
Plug '907th/vim-auto-save'
Plug 'tpope/vim-dispatch'
Plug 'janko-m/vim-test'
Plug 'mbbill/undotree'
# SQL navigation
Plug 'tpope/vim-dadbod'
Plug 'kristijanhusak/vim-dadbod-ui'
plug#end()

#--- LSP settings ---------------------------------------------------------------------
var lspOptions = {
  autoPopulateDiags: v:true,
  noNewlineInCompletion: v:true,
  outlineOnRight: v:true,
  outlineWinSize: 50,
  semanticHighlight: v:true,
  showDiagWithSign: v:false,
  showSignature: v:true,
  showInlayHints: v:true,
}
autocmd VimEnter * call LspOptionsSet(lspOptions)

# Install LSP servers via:
# go install golang.org/x/tools/gopls@latest
# python -m pip install -y python-lsp-server pylsp-mypy python-lsp-ruff
# npm install -g dart-language-server vim-language-server typescript typescript-language-server vscode-langservers-extracted
# brew install marksman
var lspServers = [
  { name: 'dart', filetype: ['dart'], path: 'dart', args: ['language-server', '--client-id', 'vim'] },
  { name: 'gopls', filetype: ['go', 'gomod', 'gohtmltmpl', 'gotexttmpl'],  path: 'gopls', args: ['serve'], syncInit: v:true },
  { 
    name: 'rustanalyzer', filetype: ['rust'], path: 'rust-analyzer', args: [], syncInit: v:true,
    initializationOptions: { inlayHints: { typeHints: { enable: v:true }, parameterHints: { enable: v:true }}},
  },
  { name: 'tsserver', filetype: ['javascript', 'javascriptreact', 'typescript', 'typescriptreact'], path: 'typescript-language-server', args: ['--stdio'] },
  { 
    name: 'pylsp', filetype: ['python'], path: 'pylsp', args: [],
    initializationOptions: { settings: { pylsp: { plugins: { ruff: { enabled: true, formatEnabled: true }, pylsp_mypy: { report_progress: true }}}}}
  },
  { name: 'marksman', filetype: ['markdown'], path: 'marksman', args: ['server'], syncInit: v:true },
  { name: 'yamlls', filetype: ['yaml'], path: 'yaml-language-server', args: ['--stdio'],
    initializationOptions: { settings: { yaml: { 
    schemaStore: { enable: v:true }, completion: { enable: v:true }, format: { enable: v:true }, hover: { enable: v:true }}}},
  },
]
autocmd User LspSetup call LspAddServer(lspServers)

# Link inlay hints to the conceal group
highlight link LspInlayHint Conceal

nnoremap gd :LspGotoDefinition<CR>
nnoremap <leader>r :LspShowReferences<CR>
nnoremap <leader>i :LspGotoImplementation<CR>
nnoremap <leader>R :LspRename<CR>
nnoremap <leader>3 :LspOutline<CR>
nnoremap <leader>P :LspSymbolSearch<CR>
nnoremap ]e :LspDiagNext<CR>
nnoremap [e :LspDiagPrev<CR>
nnoremap <leader>L :LspFormat<CR>
nnoremap <leader><CR> :LspCodeAction<CR>

#--- Scope Settings ------------------------------------------------------------"
import autoload 'scope/fuzzy.vim'
nnoremap <leader>f <scriptcmd>fuzzy.BufSearch()<CR>
nnoremap <leader>p <scriptcmd>fuzzy.GitFile()<CR>
nnoremap <leader>F <scriptcmd>fuzzy.Grep('ag --vimgrep')<CR>
nnoremap <leader>b <scriptcmd>fuzzy.Buffer()<CR>
nnoremap <leader>K <scriptcmd>fuzzy.Command()<CR>
nnoremap <leader>Q <scriptcmd>fuzzy.CmdHistory()<CR>
nnoremap <leader>h <scriptcmd>fuzzy.HelpfilesGrep()<CR>
nnoremap <leader>O <scriptcmd>fuzzy.LspDocumentSymbol()<CR>
nnoremap <leader><leader> <scriptcmd>fuzzy.Keymap()<CR>

# Map buffer quick switch keys
nnoremap <leader><Tab> <C-^><CR>

#--- Fugitive settings ----------------------------------------------------------------"
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gc :Git commit<CR>
nnoremap <leader>gd :Git diff --minimal<CR>
nnoremap <leader>gs :Git<CR>
nnoremap <leader>gl :Git log --graph --oneline --decorate<CR>
nnoremap <leader>gp :Git push<CR>
nnoremap <leader>gh :0Gclog<CR>

#--- AutoPairs settings ---------------------------------------------------------------"
g:AutoPairsCompleteOnlyOnSpace = 1

#--- AutoSave settings ----------------------------------------------------------------"
set noswapfile
g:auto_save = 1
g:auto_save_silent = 1
g:auto_save_events = ["InsertLeave", "TextChanged"]
# Disable auto-save for SQL files
augroup ft_sql
  au!
  au FileType sal let b:auto_save = 0
augroup END

#--- Polyglot settings ----------------------------------------------------------------"
g:polyglot_disabled = ['sensible']

#--- Go settings ----------------------------------------------------------------------"
g:go_highlight_generate_tags = 1
g:go_highlight_build_constraints = 1
g:go_highlight_extra_types = 1

#--- GitGutter settings ---------------------------------------------------------------"
nnoremap ]h <Plug>(GitGutterNextHunk)
nnoremap [h <Plug>(GitGutterPrevHunk)

#--- Statusbar settings ------------------------------------------------------"
#Don't show the mode as it is present in statusline; always show the statusline
set noshowmode laststatus=2

#--- Vim Test settings ----------------------------------------------------------------"
nnoremap <leader>tn :TestNearest \| cope<CR>
nnoremap <leader>tf :TestFile \| cope<CR>
nnoremap <leader>ts :TestSuite \| cope<CR>
nnoremap <leader>tl :TestLast \| cope<CR>

g:test#strategy = "dispatch"
g:test#python#pytest#executable = 'python -m pytest -rA'
g:test#python#pyunit#executable = 'python -m unittest --buffer'
g:test#python#runner = 'pyunit'
g:test#go#gotest#executable = 'go test -v'

#--- DadBod Settings ------------------------------------------------------------------"
g:db_ui_auto_execute_table_helpers = 1
g:db_ui_winwidth = 40
g:db_ui_table_helpers = {
   'postgresql': {
     'Count': 'select count(*) from {dbname}.{table}',
   }
}

#--- Colorscheme settings -----------------------------------------------------------------"
g:jb_style = 'dark'
g:jb_enable_unicode = 1
colorscheme jb

