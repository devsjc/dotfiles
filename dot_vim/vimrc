"=== VIM SETTINGS ====================================================================="

unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

syntax enable
filetype plugin indent on
set hlsearch incsearch ignorecase
set number relativenumber 
set wrap linebreak
set encoding=UTF-8
set updatetime=100

autocmd FileType markdown setlocal spell spelllang=en_gb
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2

if $COLORTERM == 'truecolor'
  set termguicolors
endif

let mapleader="\<space>"

"=== PLUGINS =========================================================================="

function! s:packager_init(packager) abort
  call a:packager.add('kristijanhusak/vim-packager', {'type': 'opt'})
  "Navigation and search
  call a:packager.add('junegunn/fzf', { 'do': './install --all && ln -s $(pwd) ~/.fzf'})
  call a:packager.add('junegunn/fzf.vim')
  "Language-aware actions, linting & fixing, autocompletion
  call a:packager.add('yegappan/lsp')
  call a:packager.add('dense-analysis/ale')
  call a:packager.add('hrsh7th/vim-vsnip', {'requires': ['hrsh7th/vim-vsnip-integ', 'rafamadriz/friendly-snippets']})
  call a:packager.add('github/copilot.vim')
  "QOL IDE-like features
  call a:packager.add('907th/vim-auto-save')
  call a:packager.add('jiangmiao/auto-pairs')
  call a:packager.add('bluz71/vim-mistfly-statusline', {'requires': 'airblade/vim-gitgutter'})
  call a:packager.add('lambdalisue/fern.vim', {'requires': ['lambdalisue/fern-git-status.vim','lambdalisue/fern-renderer-devicons.vim', 'lambdalisue/fern-hijack.vim']})
  call a:packager.add('janko-m/vim-test', {'requires': 'skywind3000/asyncrun.vim'})
  call a:packager.add('ap/vim-css-color')
  "Icons, Colours and syntax highlighting
  call a:packager.add('sheerun/vim-polyglot')
  call a:packager.add('sainnhe/sonokai')
  call a:packager.add('ryanoasis/vim-devicons')
  "Misc helper plugins
  call a:packager.add('liuchengxu/vim-which-key')
  call a:packager.add('tpope/vim-dadbod')
  call a:packager.add('kristijanhusak/vim-dadbod-ui')
  "Writing plugins
  call a:packager.add('junegunn/goyo.vim')
endfunction

packadd vim-packager
call packager#setup(function('s:packager_init'))

"--- WhichKey settings ----------------------------------------------------------------"
let g:mapleader = "\<Space>"
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
set timeoutlen=200

"--- LSP settings ---------------------------------------------------------------------"
"Highlights: don't use loclist (used by ALE for diags)
let lspOptions = #{
    \ aleSupport: v:true,
    \ autoHighlight: v:true,
    \ completionTextEdit: v:false,
    \ noNewlineInCompletion: v:true,
    \ outlineOnRight: v:true,
    \ outlineWinSize: 70,
    \ showInlayHints: v:true,
    \ vsnipSupport: v:true,
    \ useQuickfixForLocations: v:true,
    \ }
autocmd VimEnter * call LspOptionsSet(lspOptions)

let lspServers = [
    \ #{ name: 'dart',  filetype: ['dart'], path: 'dart', args: ['language-server', '--client-id', 'vim'] },
    \ #{ name: 'gopls', filetype: ['go', 'gomod', 'gohtmltmpl', 'gotexttmpl'],  path: 'gopls', args: ['serve'], syncInit: v:true },
    \ #{ name: 'pylsp', filetype: ['py', 'python'], path: 'pylsp', args: [] },
\ ]
autocmd VimEnter * call LspAddServer(lspServers)

"Enable auto selection of the fist autocomplete item
augroup LspSetup
    au!
    au User LspAttached set completeopt-=noselect
augroup END
"Disable newline on selecting completion option
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

"Mappings for most-used functions
nnoremap K :LspHover<CR>
nnoremap gd :LspGotoDefinition<CR>
nnoremap gr :LspShowReferences<CR>
nnoremap gi :LspGotoImplementation<CR>
nnoremap <leader>R :LspRename<CR>
nnoremap <leader>o :LspDocumentSymbol<CR>
nnoremap <leader>O :LspOutline<CR>

"--- ALE settings ---------------------------------------------------------------------"
"Disable ALE's LSP in favour of standalone LSP plugin
let g:ale_disable_lsp = 1

"Show linting errors with highlights
" * Can also be viewed in the loclist with :lope
let g:ale_set_signs = 1
let g:ale_set_highlights = 1
let g:ale_virtualtext_cursor = 1
highlight ALEError ctermbg=none cterm=underline

"Define when to lint
let g:ale_lint_on_save = 1
let g:ale_lint_on_insert_leave = 1
let g:ale_lint_on_text_change = 'never'

"Set linters for individual filetypes
let g:ale_linters_explicit = 1
let g:ale_linters = {
    \ 'dart': ['analysis-server', 'dart-format', 'dart-analyze'],
    \ 'go': ['gofmt', 'gopls', 'govet', 'gobuild'],
    \ 'proto': ['buf-lint', 'protoc-gen-lint'],
    \ 'python': ['ruff', 'mypy', 'pylsp'],
    \ 'yaml': ['yamllint'],
\ }
"Specify fixers for individual filetypes
let g:ale_fixers = {
    \ '*': ['trim_whitespace'],
    \ 'dart': ['dart-format'],
    \ 'python': ['ruff'],
    \ 'go': ['gopls', 'goimports', 'gofmt', 'gotype', 'govet'],
    \ 'proto': ['buf-format', 'protolint'],
\ }
"Show info, warnings, and errors; Write which linter produced the message
let g:ale_lsp_show_message_severity = 'information'
let g:ale_echo_msg_format = '[%linter%] [%severity%:%code%] %s'
"Specify Containerfiles as Dockerfiles
let g:ale_linter_aliases = {"Containerfile": "dockerfile"}

"Mapping to run fixers on file
nnoremap <leader>L :ALEFix<CR>
"Mapping to go to next/previous diagnostic
nnoremap ]e :ALENextWrap<CR>
nnoremap [e :ALEPreviousWrap<CR>

"--- Fuzzy Finder Settings ------------------------------------------------------------"
"Mappings for searching within files and buffers
nnoremap <leader>f :BLines<CR>
nnoremap <leader><leader> :GFiles<CR>
nnoremap <leader>F :Ag<CR>
nnoremap <leader>b :Buffers<CR>

"Map buffer quick switch keys
nnoremap <leader><Tab> <C-^><CR>

"--- Fern Filetree settings -----------------------------------------------------------"
let g:fern#renderer = "devicons"
let g:fern#default_hidden = 1
let g:fern#default_exclude = '\%(
      \\.git\|\.idea\|\.DS_Store
      \\|__pycache__\|_cache\|egg-info\|build\|dist
      \\)$'

nnoremap <leader>a :Fern . -drawer -toggle<CR>

"--- AutoSave settings ----------------------------------------------------------------"
set noswapfile

let g:auto_save = 1
let g:auto_save_silent = 1
let g:auto_save_events = ["InsertLeave", "TextChanged", "FocusLost"]

"--- Polyglot settings ----------------------------------------------------------------"
let g:polyglot_disabled = ['sensible']

"--- GitGutter settings ---------------------------------------------------------------"
"Make movement between hunks consistent with leader keys
nnoremap ]h <Plug>(GitGutterNextHunk)
nnoremap [h <Plug>(GitGutterPrevHunk)

"--- Mistfly statusline settings ------------------------------------------------------"
"Don't show the mode as it is present in statusline; always show the statusline
set noshowmode laststatus=2

"--- Vim Test settings ----------------------------------------------------------------"
nnoremap <leader>tn :TestNearest<CR>
nnoremap <leader>tf :TestFile<CR>
nnoremap <leader>ts :TestSuite<CR>
nnoremap <leader>tl :TestLast<CR>

let test#strategy = "dispatch"

let g:test#python#pytest#executable = 'python -m pytest'
let g:test#python#pyunit#executable = 'python -m unittest'

"--- DadBod Settings ------------------------------------------------------------------"
let g:dbs = {'local': 'postgres://postgres@localhost:5432/postgres'}
let g:db_ui_auto_execute_table_helpers = 1
let g:db_ui_use_nerd_fonts = 1
let g:db_ui_winwidth = 30
let g:db_ui_table_helpers = {
\   'postgresql': {
\     'Count': 'select count(*) from {dbname}.{table}',
\   }
\ }

"--- Colorscheme settings -----------------------------------------------------------------"
let g:sonokai_style = 'maia'
let g:sonokai_better_performance = 1
let g:sonokai_disable_italic_comment = 1

colorscheme sonokai

