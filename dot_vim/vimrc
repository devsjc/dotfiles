vim9script
#=== VIM SETTINGS =====================================================================

unlet! g:skip_defaults_vim
source $VIMRUNTIME/defaults.vim

g:mapleader = ' '      # Set the leader key to space

g:netrw_liststyle = 3
g:netrw_localcopydircmd = 'cp -r'
g:netrw_winsize = 30
g:netrw_list_hide = '^\.,\~,*\.pyc,*\.egg*$'

nnoremap <leader>1 :Lexplore %:p:h<CR>
syntax enable
filetype plugin indent on
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set hlsearch incsearch ignorecase
set number relativenumber 
set wrap linebreak
set encoding=UTF-8
set updatetime=100
set splitbelow splitright
set termwinsize=10x0
g:undodir = "~/.local/state/vim/undo"

autocmd FileType markdown setlocal spell spelllang=en_gb
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType terraform setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType vim setlocal tabstop=2 shiftwidth=2 softtabstop=2

if $COLORTERM == 'truecolor'
  set termguicolors
endif

def g:SynGroup()
  let l:s = synID(line('.'), col('.'), 1)
  echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
enddef

#=== PLUGINS ==========================================================================

if empty(glob('~/.vim/autoload/plug.vim'))
  execute '!curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
endif

plug#begin('~/.vim/pack/packager/start')
# Navigation and search
Plug 'girishji/scope.vim'
Plug 'yegappan/lsp', { 'dir': '~/.vim/pack/packager/opt/lsp' }
Plug 'github/copilot.vim'
# Version control
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
# UI modifications
Plug 'bluz71/vim-mistfly-statusline'
Plug 'ap/vim-css-color'
Plug 'devsjc/vim-jb'
# Helpers
Plug '907th/vim-auto-save'
Plug 'tpope/vim-dispatch'
Plug 'janko-m/vim-test'
Plug 'mbbill/undotree'
# SQL navigation
Plug 'tpope/vim-dadbod'
Plug 'kristijanhusak/vim-dadbod-ui'
plug#end()

#--- LSP settings ---------------------------------------------------------------------
var lspOptions = {
    aleSupport: v:false,
    autoHighlight: v:true,
    autoPopulateDiags: v:true,
    noNewlineInCompletion: v:true,
    outlineOnRight: v:true,
    outlineWinSize: 50,
    semanticHighlight: v:true,
    showDiagInBaloon: v:true,
    showDiagWithVirtualText: v:false,
    showInlayHints: v:true,
    showSignature: v:true,
    usePopupInCodeAction: v:true,
}
autocmd VimEnter * call LspOptionsSet(lspOptions)

# Install LSP servers via:
# go install golang.org/x/tools/gopls@latest
# python -m pip install -y python-lsp-server pylsp-mypy ruff-lsp
# npm install -g dart-language-server vim-language-server typescript typescript-language-server vscode-langservers-extracted
# brew install terraform-ls marksman
var lspServers = [
  { name: 'dart', filetype: ['dart'], path: 'dart', args: ['language-server', '--client-id', 'vim'] },
  { name: 'gopls', filetype: ['go', 'gomod', 'gohtmltmpl', 'gotexttmpl'],  path: 'gopls', args: ['serve'], syncInit: v:true },
  { name: 'tsserver', filetype: ['javascript', 'javascriptreact', 'typescript', 'typescriptreact'], path: 'typescript-language-server', args: ['--stdio'] },
  { name: 'pylsp', filetype: ['python'], path: 'pylsp', args: [] },
  { name: 'vimls', filetype: ['vim'], path: 'vim-language-server', args: ['--stdio'] },
  {
    name: 'yaml-ls', filetype: ['yaml', 'yml'], path: 'yaml-language-server', args: ['--stdio'],
    workspaceConfig: { completion: v:true, validate: v:true, schemaStore: { enable: v:true, url: 'https://www.schemastore.org/api/json/catalog.json' } },
  },
  { name: 'marksman', filetype: ['markdown'], path: 'marksman', args: ['server'], syncInit: v:true },
  { name: 'terraform-ls', filetype: ['terraform'], path: 'terraform-ls', args: ['serve'] },
]
autocmd VimEnter * call LspAddServer(lspServers)

# Enable auto selection of the fist autocomplete item
#augroup LspSetup
#    au!
#    au User LspAttached set completeopt-=noselect
#augroup END
# Disable newline on selecting completion option
#inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

# Link inlay hints to the conceal group
highlight link LspInlayHint Conceal

# Enable toggling of outline window
def ToggleLspOutline()
  var winid = bufwinid('LSP-Outline')
    if winid == -1
        LspOutline
    else
      var winnr = win_id2win(winid)
      if winnr > 0
        execute winnr.'wincmd c'
      endif
    endif
enddef

nnoremap gd :LspGotoDefinition<CR>
nnoremap ]e :LspDiag next<CR>
nnoremap [e :LspDiag prev<CR>
nnoremap <leader>r :LspShowReferences<CR>
nnoremap <leader>i :LspGotoImplementation<CR>
nnoremap <leader>R :LspRename<CR>
nnoremap <silent> <leader>3 :call ToggleLspOutline()<CR>
nnoremap <leader>L :LspFormat<CR>
nnoremap <leader>P :LspSymbolSearch<CR>

#--- Scope Settings ------------------------------------------------------------"
import autoload 'scope/fuzzy.vim'
nnoremap <leader>f <scriptcmd>fuzzy.BufSearch()<CR>
nnoremap <leader>p <scriptcmd>fuzzy.GitFile()<CR>
nnoremap <leader>F <scriptcmd>fuzzy.Grep('ag --vimgrep')<CR>
nnoremap <leader>b <scriptcmd>fuzzy.Buffer()<CR>
nnoremap <leader>K <scriptcmd>fuzzy.Command()<CR>
nnoremap <leader>h <scriptcmd>fuzzy.HelpfilesGrep()<CR>
nnoremap <leader>O <scriptcmd>fuzzy.LspDocumentSymbol()<CR>
nnoremap <leader><leader> <scriptcmd>fuzzy.Keymap()<CR>

# Map buffer quick switch keys
nnoremap <leader><Tab> <C-^><CR>

#--- Fugitive settings ----------------------------------------------------------------"
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gc :Git commit<CR>
nnoremap <leader>gd :Git diff --minimal<CR>
nnoremap <leader>gs :Git<CR>
nnoremap <leader>gl :Git log --graph --oneline --decorate<CR>
nnoremap <leader>gp :Git push<CR>
nnoremap <leader>gh :0Gclog<CR>

#--- AutoPairs settings ---------------------------------------------------------------"
g:AutoPairsCompleteOnlyOnSpace = 1

#--- AutoSave settings ----------------------------------------------------------------"
set noswapfile
g:auto_save = 1
g:auto_save_silent = 1
g:auto_save_events = ["InsertLeave", "TextChanged"]

#--- Polyglot settings ----------------------------------------------------------------"
g:polyglot_disabled = ['sensible']

#--- Go settings ----------------------------------------------------------------------"
g:go_highlight_generate_tags = 1
g:go_highlight_build_constraints = 1
g:go_highlight_extra_types = 1

#--- GitGutter settings ---------------------------------------------------------------"
nnoremap ]h <Plug>(GitGutterNextHunk)
nnoremap [h <Plug>(GitGutterPrevHunk)

#--- Statusbar settings ------------------------------------------------------"
#Don't show the mode as it is present in statusline; always show the statusline
set noshowmode laststatus=2

#--- Vim Test settings ----------------------------------------------------------------"
nnoremap <leader>tn :TestNearest \| cope<CR>
nnoremap <leader>tf :TestFile \| cope<CR>
nnoremap <leader>ts :TestSuite \| cope<CR>
nnoremap <leader>tl :TestLast \| cope<CR>

g:test#strategy = "dispatch"
g:test#python#pytest#executable = 'python -m pytest -rA'
g:test#python#pyunit#executable = 'python -m unittest --buffer'
g:test#go#gotest#executable = 'go test -v'

#--- DadBod Settings ------------------------------------------------------------------"
g:db_ui_auto_execute_table_helpers = 1
g:db_ui_winwidth = 40
g:db_ui_table_helpers = {
   'postgresql': {
     'Count': 'select count(*) from {dbname}.{table}',
   }
}

#--- Colorscheme settings -----------------------------------------------------------------"
g:jb_style = 'dark'
g:jb_enable_unicode = 1
colorscheme jb

