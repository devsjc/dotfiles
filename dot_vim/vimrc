"=== VIM SETTINGS ====================================================================="

unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

syntax enable
filetype plugin indent on
set tabstop=4 softtabstop=4 shiftwidth=4 expandtab
set hlsearch incsearch ignorecase
set number relativenumber 
set wrap linebreak
set encoding=UTF-8
set updatetime=100
set makeprg=task
set splitbelow splitright

autocmd FileType markdown setlocal spell spelllang=en_gb
autocmd FileType html setlocal tabstop=2 shiftwidth=2 softtabstop=2
autocmd FileType terraform setlocal tabstop=2 shiftwidth=2 softtabstop=2

if $COLORTERM == 'truecolor'
  set termguicolors
endif

let mapleader="\<space>"

nnoremap <expr> n (v:searchforward ? 'n' : 'N')
nnoremap <expr> N (v:searchforward ? 'N' : 'n')
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>


function! SynGroup()
  let l:s = synID(line('.'), col('.'), 1)
  echo synIDattr(l:s, 'name') . ' -> ' . synIDattr(synIDtrans(l:s), 'name')
endfun

"=== PLUGINS =========================================================================="

function! s:packager_init(packager) abort
  call a:packager.add('kristijanhusak/vim-packager', {'type': 'opt'})
  "Navigation and search
  call a:packager.add('junegunn/fzf.vim', {'requires': ['junegunn/fzf'], 'do': 'brew install fzf'})
  "Language-aware actions, linting & fixing, autocompletion
  call a:packager.add('yegappan/lsp') 
  call a:packager.add('dense-analysis/ale')
  call a:packager.add('github/copilot.vim')
  "QOL IDE-like features
  call a:packager.add('907th/vim-auto-save')
  call a:packager.add('LunarWatcher/auto-pairs')
  call a:packager.add('airblade/vim-gitgutter')
  call a:packager.add('bluz71/vim-mistfly-statusline')
  call a:packager.add('lambdalisue/fern.vim', {'requires': [
      \ 'lambdalisue/fern-git-status.vim',
      \ 'lambdalisue/fern-renderer-nerdfont.vim',
      \ 'lambdalisue/fern-hijack.vim'
      \ ]})
  call a:packager.add('janko-m/vim-test', {'requires': 'skywind3000/asyncrun.vim'})
  call a:packager.add('ap/vim-css-color')
  "Icons, Colours and syntax highlighting
  call a:packager.add('devsjc/vim-jb', {'requires': ['sheerun/vim-polyglot']})
  call a:packager.add('lambdalisue/nerdfont.vim')
  "Misc helper plugins
  call a:packager.add('tpope/vim-fugitive')
  call a:packager.add('mbbill/undotree')
  call a:packager.add('liuchengxu/vim-which-key')
  call a:packager.add('kristijanhusak/vim-dadbod-ui', {'requires': ['tpope/vim-dadbod']})
endfunction

packadd vim-packager
call packager#setup(function('s:packager_init'))

"--- WhichKey settings ----------------------------------------------------------------"
let g:mapleader = "\<Space>"
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>
set timeoutlen=200

"--- LSP settings ---------------------------------------------------------------------"
let lspOptions = #{
    \ aleSupport: v:true,
    \ autoHighlight: v:true,
    \ autoPopulateDiags: v:true,
    \ diagVirtualTextAlign: 'after',
    \ noNewlineInCompletion: v:true,
    \ outlineOnRight: v:true,
    \ outlineWinSize: 50,
    \ semanticHighlight: v:true,
    \ showDiagInBaloon: v:true,
    \ showDiagWithVirtualText: v:false,
    \ showInlayHints: v:true,
    \ showSignature: v:true,
    \ }
autocmd VimEnter * call LspOptionsSet(lspOptions)

let yamlWorkspaceConfig = #{
    \ completion: v:true,
    \ validate: v:true,
    \ schemaStore: #{
        \ enable: v:true,
        \ url: 'https://www.schemastore.org/api/json/catalog.json',
        \ },
    \ }

" Install LSP servers via:
" go install golang.org/x/tools/gopls@latest
" python -m pip install -y python-lsp-server pylsp-mypy python-lsp-ruff
" python -m pip install ruff-lsp
" npm install -g dart-language-server
" npm install -g vim-language-server
" npm install -g typescript typescript-language-server
" npm install -g vscode-langservers-extracted
" brew install terraform-ls marksman
let lspServers = [
    \ #{ name: 'dart', filetype: ['dart'], path: 'dart', args: ['language-server', '--client-id', 'vim'] },
    \ #{ name: 'gopls', filetype: ['go', 'gomod', 'gohtmltmpl', 'gotexttmpl'],  path: 'gopls', args: ['serve'], syncInit: v:true },
    \ #{ name: 'tsserver', filetype: ['javascript', 'javascriptreact', 'typescript', 'typescriptreact'], path: 'typescript-language-server', args: ['--stdio'] },
    \ #{ name: 'pylsp', filetype: ['python'], path: 'pylsp', args: [] },
    \ #{ name: 'vimls', filetype: ['vim'], path: 'vim-language-server', args: ['--stdio'] },
    \ #{ name: 'yaml-ls', filetype: ['yaml', 'yml'], path: 'yaml-language-server', args: ['--stdio'], workspaceConfig: yamlWorkspaceConfig },
    \ #{ name: 'vsc-mdls', filetype: ['markdown'], path: 'marksman', args: ['server'], syncInit: v:true },
    \ #{ name: 'terraform-ls', filetype: ['terraform'], path: 'terraform-ls', args: ['serve'] },
\ ]
autocmd VimEnter * call LspAddServer(lspServers)

"Enable auto selection of the fist autocomplete item
augroup LspSetup
    au!
    au User LspAttached set completeopt-=noselect
augroup END
"Disable newline on selecting completion option
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"

"Link inlay hints to the conceal group
highlight link LspInlayHint Conceal

"Enable toggling of outline window
function! ToggleLspOutline()
  let winid = bufwinid('LSP-Outline')
    if winid == -1
        LspOutline
    else
      let winnr = win_id2win(winid)
      if winnr > 0
        execute winnr.'wincmd c'
      endif
    endif
endfunction

"Mappings for most-used functions
nnoremap gd :LspGotoDefinition<CR>
nnoremap <leader>r :LspShowReferences<CR>
nnoremap <leader>i :LspGotoImplementation<CR>
nnoremap <leader>R :LspRename<CR>
nnoremap <leader>O :LspDocumentSymbol<CR>
nnoremap <silent> <leader>3 :call ToggleLspOutline()<CR>
nnoremap <leader>L :LspFormat<CR>
nnoremap <leader>P :LspSymbolSearch<CR>

"--- ALE Settings ---------------------------------------------------------------------"
let g:ale_disable_lsp = 1
let g:ale_lint_on_save = 1
let g:ale_fix_on_save = 0
let g:ale_hover_cursor = 1
let g:ale_set_balloons = 'hover'
"Show linting errors with highlights
let g:ale_set_signs = 1
let g:ale_set_highlights = 1
let g:ale_virtualtext_cursor = 1
"Change highlight style when color scheme is sourced
augroup ALEHighlights
    autocmd!
    autocmd ColorScheme * highlight link ALEError ErrorMsg
augroup END

"Set linters for individual filetypes
let g:ale_linters = {
    \ 'python': ['ruff', 'mypy', 'pylsp'],
\ }
"Specify fixers for individual filetypes
let g:ale_fixers = {
    \ '*': ['trim_whitespace'],
    \ 'python': ['ruff', 'ruff_format'],
\ }
"Show info, warnings, and errors; Write which linter produced the message
let g:ale_lsp_show_message_severity = 'information'
let g:ale_echo_msg_format = '[%linter%] [%severity%:%code%] %s'
"Specify Containerfiles as Dockerfiles
let g:ale_linter_aliases = {"Containerfile": "dockerfile"}

"Mapping to run fixers on file and navigate between errors
nnoremap <leader>L :ALEFix<CR>
nnoremap ]e :LspDiag next<CR>
nnoremap [e :LspDiag prev<CR>

"--- Fuzzy Finder Settings ------------------------------------------------------------"
"Mappings for searching within files and buffers
nnoremap <leader>f :BLines<CR>
nnoremap <leader>p :GFiles<CR>
nnoremap <leader>F :Ag<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap <leader>K :Commands

"Map buffer quick switch keys
nnoremap <leader><Tab> <C-^><CR>

"--- Fugitive settings ----------------------------------------------------------------"
nnoremap <leader>ga :Gwrite<CR>
nnoremap <leader>gc :Git commit<CR>
nnoremap <leader>gd :Git diff --minimal<CR>
nnoremap <leader>gs :Git<CR>
nnoremap <leader>gl :Git log --graph --oneline --decorate<CR>
nnoremap <leader>gp :Git push<CR>
nnoremap <leader>gh :0Gclog<CR>

"--- AutoPairs settings ---------------------------------------------------------------"
let g:AutoPairsCompleteOnlyOnSpace = 1

"--- UndoTree settings ----------------------------------------------------------------"
nnoremap <leader>u :UndotreeToggle<CR>

"--- Fern Filetree settings -----------------------------------------------------------"
let g:fern#renderer = "nerdfont"
let g:fern#default_hidden = 1
let g:fern#default_exclude = '\%(
      \\.git\|\.idea\|\.DS_Store
      \\|__pycache__\|_cache\|egg-info\|build\|dist
      \\)$'

nnoremap <leader>1 :Fern . -drawer -toggle<CR>

"--- AutoSave settings ----------------------------------------------------------------"
set noswapfile
let g:auto_save = 1
let g:auto_save_silent = 1
let g:auto_save_events = ["InsertLeave", "TextChanged", "FocusLost"]

"--- Polyglot settings ----------------------------------------------------------------"
let g:polyglot_disabled = ['sensible']

"--- Go settings ----------------------------------------------------------------------"
let g:go_highlight_generate_tags = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1

"--- GitGutter settings ---------------------------------------------------------------"
nnoremap ]h <Plug>(GitGutterNextHunk)
nnoremap [h <Plug>(GitGutterPrevHunk)

"--- Statusbar settings ------------------------------------------------------"
"Don't show the mode as it is present in statusline; always show the statusline
set noshowmode laststatus=2

"--- Vim Test settings ----------------------------------------------------------------"
nnoremap <leader>tn :TestNearest \| cope<CR>
nnoremap <leader>tf :TestFile \| cope<CR>
nnoremap <leader>ts :TestSuite \| cope<CR>
nnoremap <leader>tl :TestLast \| cope<CR>

let test#strategy = "asyncrun"

let g:test#python#pytest#executable = 'python -m pytest -rA'
let g:test#python#pyunit#executable = 'python -m unittest --buffer'
let g:test#go#gotest#executable = 'go test -v'

"--- DadBod Settings ------------------------------------------------------------------"
let g:db_ui_auto_execute_table_helpers = 1
let g:db_ui_use_nerd_fonts = 1
let g:db_ui_winwidth = 30
let g:db_ui_table_helpers = {
\   'postgresql': {
\     'Count': 'select count(*) from {dbname}.{table}',
\   }
\ }

"--- Colorscheme settings -----------------------------------------------------------------"
let g:jb_style='dark'
let g:jb_enable_unicode = 1
colorscheme jb

