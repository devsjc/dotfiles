"=== VIM SETTINGS ====================================================================="

unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

syntax on
filetype plugin on
set hlsearch incsearch ignorecase
set number relativenumber autoindent smartindent
set shiftwidth=4

set completeopt=longest,menu,menuone,preview,noselect,noinsert
inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
inoremap <expr> <C-n> pumvisible() ? '<C-n>' : '<C-n><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'
inoremap <expr> <M-,> pumvisible() ? '<C-n>' : '<C-x><C-o><C-n><C-p><C-r>=pumvisible() ? "\<lt>Down>" : ""<CR>'

let mapleader="\<space>"
let loaded_matchparen=1

if $COLORTERM == 'truecolor'
  set termguicolors
endif

nnoremap <leader>t :botright term<CR>

"--- Netrw settings -------------------------------------------------------------------"
let g:netrw_liststyle=3
let g:netrwbufsettings='relativenumber nobuflisted nomodifiable nomodified readonly'
let g:netrw_bufsettings='noma nomod nu nobl nowrap ro'

"=== PLUGINS =========================================================================="

function! s:packager_init(packager) abort
  call a:packager.add('kristijanhusak/vim-packager', {'type': 'opt'})
  call a:packager.add('junegunn/fzf', { 'do': './install --all && ln -s $(pwd) ~/.fzf'})
  call a:packager.add('junegunn/fzf.vim')
  call a:packager.add('sainnhe/sonokai')

  call a:packager.add('yegappan/lsp')
  call a:packager.add('justinmk/vim-sneak')
  call a:packager.add('airblade/vim-gitgutter')
  call a:packager.add('jiangmiao/auto-pairs')
  call a:packager.add('tpope/vim-fugitive')
  call a:packager.add('itchyny/lightline.vim')
  call a:packager.add('liuchengxu/vim-which-key')
  call a:packager.add('tpope/vim-dadbod')
  call a:packager.add('kristijanhusak/vim-dadbod-ui')
endfunction

packadd vim-packager
call packager#setup(function('s:packager_init'))

"--- WhichKey settings ----------------------------------------------------------------"
let g:mapleader = "\<Space>"
nnoremap <silent> <leader> :<c-u>WhichKey '<Space>'<CR>

"--- LSP settings ---------------------------------------------------------------------"
let lspServers = [
    \ #{ name: 'gopls', filetype: ['go', 'gomod'],  path: 'gopls', args: ['serve'] },
    \ #{ name: 'pylsp', filetype: ['py', 'python'], path: 'pylsp', args: []        },
    \]
autocmd VimEnter * call LspAddServer(lspServers)

"Enable auto selection of the fist autocomplete item
augroup LspSetup
    au!
    au User LspAttached set completeopt-=noselect
augroup END

let lspOpts = #{
    \ autoHighlight: v:true,
    \ noNewLineInCompletion: v:true,
    \ usePopupInCodeAction: v:true,
    \ noNewlineInCompletion: v:true,
    \ autoHighlightDiags: v:true,
    \ showDiagWithVirtualText: v:true,
    \ outlineOnRight: v:true,
    \ outlineWinSize: 70,
    \ }
autocmd VimEnter * call LspOptionsSet(lspOpts)

nnoremap <leader>lp :LspPeekDefinition<CR>
nnoremap <leader>lgd :LspGoToDefinition<CR>
nnoremap <leader>lr :LspRename<CR>

"--- Fuzzy Finder Settings ------------------------------------------------------------"
nnoremap <leader>fl :Lines<CR>
nnoremap <leader>ff :Files<CR>
nnoremap <leader>fg :GFiles<CR>
nnoremap <leader>fb :Buffers<CR>

"--- Lightline settings ---------------------------------------------------------------"
set laststatus=2 noshowmode
let g:lightline = {'component_function': {'gitbranch': 'FugitiveHead'}}

"--- DadBod Settings ------------------------------------------------------------------"
let g:dbs = {'local': 'postgres://postgres@localhost:5432/postgres'}
let g:db_ui_auto_execute_table_helpers = 1
let g:db_ui_use_nerd_fonts = 1
let g:db_ui_winwidth = 30
let g:db_ui_table_helpers = {
\   'postgresql': {
\     'Count': 'select count(*) from {dbname}.{table}',
\   }
\ }

"--- Sonokai settings -----------------------------------------------------------------"
colorscheme sonokai

