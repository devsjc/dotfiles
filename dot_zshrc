# Preferred terminal settings:
# Font: 
#   JetBrainsMono Nerd Font (brew install font-jetbrains-mono-nerd-font)
#   Size 13, Line Spacing 120%
# Window:
# Transparency 19%, Blur 5%

# Get path to shared binaries based on OS
if [[ "$(uname)" = "Darwin" ]]; then
  export SBINS_HOME="/opt/homebrew/share"
elif [[ "$(expr substr $(uname -s) 1 5)" == "Linux" ]]; then
  export SBINS_HOME="/bin"
fi

# Get package manager
if [[ -x "$(command -v brew)" ]]; then
  export PKG_MGR="brew"
elif [[ -x "$(command -v apt)" ]]; then
  export PKG_MGR="sudo apt"
elif [[ -x "$(command -v pkg)" ]]; then
  export PKG_MGR="pkg"
fi

# Export locations for XDG directories
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
export XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}
export XDG_BIN_HOME=${XDG_BIN_HOME:-$HOME/.local/bin}

#=== ZSH SETTINGS ====================================================================

# If brew exists, add it's autocompletion files to the fpath
if type brew &>/dev/null
then
  FPATH="$(brew --prefix)/share/zsh/site-functions:${FPATH}"
fi

# Enable autocompletion
autoload -Uz compinit
compinit -i

# Enable history, making the history file if it doesn't exist
if [[ ! -f "${XDG_CACHE_HOME}/zsh/zsh_history" ]]; then
  mkdir -p "${XDG_CACHE_HOME}/zsh"
  touch "${XDG_CACHE_HOME}/zsh/zsh_history"
fi
HISTFILE=${XDG_CACHE_HOME}/zsh/zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt appendhistory

#=== TOOLS ===========================================================================

#--- FZF -----------------------------------------------------------------------------
# Install if not already installed
if [[ ! -x "$(command -v fzf)" ]]; then
  $PKG_MGR install fzf
fi

# Set the default command to use fd
export FZF_DEFAULT_COMMAND='fd . --type f --follow -H --exclude .git/'

#=== PLUGINS =========================================================================

#--- Plugin Management ---------------------------------------------------------------
# Create plugin folder if it doesn't exist and add it to the fpath
if [[ ! -d "${XDG_DATA_HOME}/zsh-custom" ]]; then
  mkdir -p "${XDG_DATA_HOME}/zsh-custom"
fi
export ZSH_CUSTOM="${XDG_DATA_HOME}/zsh-custom"
FPATH="${XDG_DATA_HOME}/zsh-custom:${FPATH}"

# Define a function to source a git plugin
# $1: plugin name, $2: plugin source
function source_plugin() {
  if [[ ! -d "${ZSH_CUSTOM}/${1}" ]]; then
    git clone --depth=1 "${2}.git" "${ZSH_CUSTOM}/${1}"
  fi
  if [[ -f "${ZSH_CUSTOM}/${1}/${1}.plugin.zsh" ]]; then
    source "${ZSH_CUSTOM}/${1}/${1}.plugin.zsh"
  elif [[ -f "${ZSH_CUSTOM}/${1}/${1}.zsh-theme" ]]; then
    source "${ZSH_CUSTOM}/${1}/${1}.zsh-theme"
  fi
} 

function update_plugins() {
  for plugin in "${ZSH_CUSTOM}"/*; do
    if [[ -d "${plugin}" ]]; then
      echo "Updating ${plugin}"
      git -C "${plugin}" pull
    fi
  done
}

#--- Plugins ---------- --------------------------------------------------------------
source_plugin "zsh-autosuggestions" "https://github.com/zsh-users/zsh-autosuggestions"
source_plugin "zsh-z" "https://github.com/agkozak/zsh-z"
source_plugin "zsh-syntax-highlighting" "https://github.com/zsh-users/zsh-syntax-highlighting"
source_plugin "powerlevel10k" "https://github.com/romkatv/powerlevel10k"

# Enable Powerlevel10k instant prompt.
if [[ -r "${XDG_CACHE_HOME}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME}/p10k-instant-prompt-${(%):-%n}.zsh"
fi
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

#--- Starship -------------------------------------------------------------------------
# Not used - in case I change from powerlever10k
export STARSHIP_CONFIG="${XDG_CONFIG_HOME}/starship/starship.toml"
# eval "$(starship init zsh)"


#=== USER CONFIGURATION ===============================================================

export EDITOR='vim'
export HOMEBREW_AUTOREMOVE=1
export DB_UI_DEFAULT="postgresql://localhost:5432/postgres"
export DB_UI_DAGSTER="postgresql://localhost:5432/dagster"
export BAT_THEME="ansi"

#--- Rust toolchain -----------------------------------------------------------------

export RUSTUP_HOME="${XDG_CONFIG_HOME}/rustup"
export CARGO_HOME="${XDG_CACHE_HOME}/cargo"

# Vim keybindings
bindkey -v
bindkey ^R history-incremental-search-backward 
bindkey ^S history-incremental-search-forward

#--- Aliases -------------------------------------------------------------------------
if [[ -x "$(command -v bat)" ]]; then
  alias cat="bat"
elif [[ -x "$(command -v batcat)" ]]; then
  alias cat="batcat"
fi
if [[ -x "$(command -v eza)" ]]; then
  alias ls="eza"
  alias la="eza --long --all --group --git --git-repos"
fi
if [[ -x "$(command -v chezmoi)" ]]; then
  alias dots="chezmoi edit --watch --apply"
  alias dotscam="chezmoi git add . && chezmoi git commit"
fi
alias dy="dig +short @dns.toys"

#--- Functions -----------------------------------------------------------------------
zzarr_ls() {
  python -c "exec(\"\\nimport ocf_blosc2\\nimport xarray as xr\\nimport zarr\\nds = xr.open_zarr('zip::$1').compute()\\nprint(ds)\\n\")";
}
zarr_ls() {
  python -c "exec(\"\\nimport ocf_blosc2\\nimport xarray as xr\\nimport zarr\\nds = xr.open_zarr('$1').compute()\\nprint(ds)\\n\")";
}
dudir() {
  du -ha $1 | sort -h | tail -22
}
pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="${PATH:+"$PATH:"}$1"
  fi
}

#=== Epilogue ======================================================================
#
# Autocompletion and key bindings
source <(fzf --zsh)
eval "$(uv generate-shell-completion zsh)"
pathadd "${SBINS_HOME}/bin"
pathadd "${CARGO_HOME}/bin"
pathadd "${XDG_BIN_HOME}"
